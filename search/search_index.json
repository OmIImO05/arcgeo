{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to arcgeo","text":"<p>Just a practice repo</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://Omiimo05.github.io/arcgeo</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"arcgeo/","title":"arcgeo module","text":"<p>Main module.</p>"},{"location":"arcgeo/#arcgeo.arcgeo.Map","title":"<code> Map            (Map)         </code>","text":"<p>This is the map class that inherits from ipyleaflet.Map.</p> <p>Parameters:</p> Name Type Description Default <code>ipyleaflet</code> <code>Map</code> <p>The ipyleaflet.Map class.</p> required Source code in <code>arcgeo/arcgeo.py</code> <pre><code>class Map(ipyleaflet.Map):\n    \"\"\"This is the map class that inherits from ipyleaflet.Map.\n\n    Args:\n        ipyleaflet (Map): The ipyleaflet.Map class.\n    \"\"\"    \n\n    def __init__(self, center=[20, 0], zoom=2, **kwargs):\n        \"\"\"Initialize the map.\n\n        Args:\n            center (list, optional): Set the center of the map. Defaults to [20, 0].\n            zoom (int, optional): Set the zoom level of the map. Defaults to 2.\n        \"\"\"        \n\n        if \"scroll_wheel_zoom\" not in kwargs:\n            kwargs[\"scroll_wheel_zoom\"] = True\n\n        if \"add_layer_control\" not in kwargs:\n            layer_control_flag = True\n\n        else:\n            layer_control_flag = kwargs[\"add_layer_control\"]\n        kwargs.pop(\"add_layer_control\", None)\n\n\n        super().__init__(center=center, zoom=zoom, **kwargs)\n        if layer_control_flag:\n            self.add_layers_control()\n\n\n    def add_tile_layer(self, url, name, **kwargs):\n        layer = ipyleaflet.TileLayer(url=url, name=name, **kwargs)\n        self.add(layer)   \n\n    def add_basemap(self, name):\n        \"\"\"\n        Adds a basemap to the current map.\n\n        Args:\n            name (str or object): The name of the basemap as a string, or an object representing the basemap.\n\n        Raises:\n            TypeError: If the name is neither a string nor an object representing a basemap.\n\n        Returns:\n            None\n        \"\"\"       \n        if isinstance(name, str):\n            url = eval(f\"basemaps.{name}\").build_url()\n            self.add_tile_layer(url, name) \n        else:\n            self.add(name)\n\n    def add_layers_control(self, position=\"topright\"):\n        \"\"\"Adds a layers control to the map.\n\n        Args:\n            position (str, optional): The position of the layers control. Defaults to \"topright\".\n        \"\"\"\n        self.add_control(ipyleaflet.LayersControl(position=position))\n\n\n    def add_geojson(self, data, name=\"geojson\", **kwargs):\n        \"\"\"Adds a GeoJSON layer to the map.\n\n        Args:\n            data (str | dict): The GeoJSON data as a string, a dictionary, or a URL.\n            name (str, optional): The name of the layer. Defaults to \"geojson\".\n        \"\"\"\n        import json\n        import requests\n\n        # If the input is a string, check if it's a file path or URL\n\n        if isinstance(data, str):\n            if data.startswith('http://') or data.startswith('https://'):\n            # It's a URL, so we fetch the GeoJSON\n                response = requests.get(data)\n                response.raise_for_status()  # Raises an HTTPError if the HTTP request returned an unsuccessful status code\n                data = response.json()\n            else:\n                # It's a file path\n                with open(data, 'r') as f:\n                    data = json.load(f)\n\n\n        if \"style\" not in kwargs:\n            kwargs[\"style\"] = {\"color\": \"black\", \"weight\": 1, \"fillOpacity\": 0}\n\n        if \"hover_style\" not in kwargs:\n            kwargs[\"hover_style\"] = {\"fillColor\": \"#542974\", \"fillOpacity\": 0.7}\n\n        layer = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n        self.add(layer)\n\n\n    def add_shp(self, data, name=\"shp\", **kwargs):\n        \"\"\"\n        Adds a shapefile to the current map.\n\n        Args:\n            data (str or dict): The path to the shapefile as a string, or a dictionary representing the shapefile.\n            name (str, optional): The name of the layer. Defaults to \"shp\".\n            **kwargs: Arbitrary keyword arguments.\n\n        Raises:\n            TypeError: If the data is neither a string nor a dictionary representing a shapefile.\n\n        Returns:\n            None\n        \"\"\"\n        import shapefile\n        import json\n\n        if isinstance(data, str):\n            with shapefile.Reader(data) as shp:\n                data = shp.__geo_interface__\n\n        self.add_geojson(data, name, **kwargs)\n\n\n\n        import geopandas as gpd\n        from ipyleaflet import GeoData\n        from shapely.geometry import Point, LineString\n\n    def add_vector(self, data):\n        \"\"\"\n        Add vector data to the map.\n\n        Args:\n            data (str or geopandas.GeoDataFrame): The vector data to add. This can be a file path or a GeoDataFrame.\n        \"\"\"\n        import geopandas as gpd\n        from ipyleaflet import GeoData\n\n        if isinstance(data, gpd.GeoDataFrame):\n            vector_layer = GeoData(geo_dataframe=data)\n\n        elif isinstance(data, str):\n            vector_layer = GeoData(geo_dataframe=gpd.read_file(data))\n\n        else:\n            raise ValueError(\"Unsupported data format. Please provide a GeoDataFrame or a file path.\")\n\n        self.add_layer(vector_layer)\n\n\n\n    def add_image(self, url, bounds, name=\"image\", **kwargs):\n        \"\"\"\n        Adds an image overlay to the map.\n\n        Args:\n            url (str): The URL of the image to add.\n            bounds (list): The bounds of the image as a list of tuples.\n            name (str, optional): The name of the image overlay. Defaults to \"image\".\n        \"\"\"\n        layer = ipyleaflet.ImageOverlay(url=url, bounds=bounds, name=name, **kwargs)\n        self.add(layer)\n\n\n    def add_raster(self, data, name=\"raster\", zoom_to_layer=True, **kwargs):\n        \"\"\"Adds a raster layer to the map.\n\n        Args:\n            data (str or rasterio.DatasetReader): The raster data to add. This can be a file path or a rasterio dataset.\n            colormap (str, optional): The name of the colormap to use. Defaults to \"inferno\".\n            name (str, optional): The name of the raster layer. Defaults to \"raster\".\n            **kwargs: Arbitrary keyword arguments.\n\n        Returns:\n            None\n        \"\"\"\n\n        try:\n            from localtileserver import TileClient, get_leaflet_tile_layer\n        except ImportError:\n            raise ImportError(\"Please install the localtileserver package.\")\n\n\n        client = TileClient(data)\n        layer = get_leaflet_tile_layer(client, name=name, **kwargs)\n        self.add(layer)\n\n        if zoom_to_layer:\n            self.center = client.center()\n            self.zoom = client.default_zoom\n\n    def add_zoom_slider(\n            self, description=\"Zoom level:\", min=0, max=24, value=10, position=\"topright\"\n    ):\n        \"\"\"Adds a zoom slider to the map.\n\n        Args:\n            position (str, optional): The position of the zoom slider. Defaults to \"topright\".\n\n        Returns:\n            None\n        \"\"\"\n        zoom_slider = widgets.IntSlider(\n            description=description, min=min, max=max, value=value\n        )\n\n        control = ipyleaflet.WidgetControl(widget=zoom_slider, position=position)\n        self.add(control)\n        widgets.jslink((zoom_slider, \"value\"), (self, \"zoom\"))\n\n\n    def add_widget(self, widget, position=\"topright\"):\n        \"\"\"Adds a widget to the map.\n\n        Args:\n            widget (object): The widget to add.\n            position (str, optional): The position of the widget. Defaults to \"topright\".\n\n        Returns:\n            None\n        \"\"\"\n        control = ipyleaflet.WidgetControl(widget=widget, position=position)\n        self.add(control)\n\n\n    def add_opacity_slider(\n            self, layer_index=-1, description=\"Opacity:\", position=\"topright\"\n    ):\n        \"\"\"Adds an opacity slider for the specified layer.\n\n        Args:\n            layer (object): The layer for which to add the opacity slider.\n            description (str, optional): The description of the opacity slider. Defaults to \"Opacity:\".\n            position (str, optional): The position of the opacity slider. Defaults to \"topright\".\n\n        Returns:\n            None\n        \"\"\"\n        layer = self.layers[layer_index]\n        opacity_slider = widgets.FloatSlider(\n            description=description, min=0, max=1, value=layer.opacity, style={\"description_width\": \"initial\"}\n        )\n\n        def update_opacity(change):\n            \"\"\"\n            Updates the opacity of a layer based on the new value from a slider.\n\n            This function is designed to be used as a callback for an ipywidgets slider. \n            It takes a dictionary with a \"new\" key representing the new value of the slider, \n            and sets the opacity of a global layer variable to this new value.\n\n            Args:\n            change (dict): A dictionary with a \"new\" key representing the new value of the slider.\n\n            Returns:\n                None\n            \"\"\"\n            layer.opacity = change[\"new\"]\n\n        opacity_slider.observe(update_opacity, \"value\")\n\n        control = ipyleaflet.WidgetControl(widget=opacity_slider, position=position)\n        self.add(control)\n\n        from ipywidgets import Dropdown, Button, HBox\n\n    def add_basemap_gui(self, position=\"topright\"):\n        \"\"\"Adds a basemap GUI to the map.\n\n        Args:\n            position (str, optional): The position of the basemap GUI. Defaults to \"topright\".\n\n        Returns:\n            None\n        \"\"\"\n        basemap_selector = widgets.Dropdown(\n            options=[\n                \"OpenStreetMap\",\n                \"OpenTopoMap\",\n                \"Esri.WorldImagery\",\n                \"CartoDB.DarkMatter\",\n                \"Esri.NatGeoWorldMap\",\n            ],\n            value=\"OpenStreetMap\",\n        )\n\n        close_button = widgets.Button(\n            icon='times', \n            layout={'width': '35px'}  \n        )\n\n        def on_basemap_change(change):\n            \"\"\"\n            Handles the event of changing the basemap on the map.\n\n            This function is designed to be used as a callback for an ipywidgets dropdown. \n            It takes a dictionary with a \"new\" key representing the new value of the dropdown, \n            and calls the add_basemap method with this new value.\n\n            Args:\n                change (dict): A dictionary with a \"new\" key representing the new value of the dropdown.\n\n            Returns:\n                None\n            \"\"\"\n\n            self.add_basemap(change['new'])\n\n\n        def on_close_button_clicked(button):\n            \"\"\"\n            Handles the event of clicking the close button on a control.\n\n            This function is designed to be used as a callback for a button click event. \n            It takes a button instance as an argument, and calls the remove method \n            to remove a global control variable from the map.\n\n            Args:\n                button (ipywidgets.Button): The button that was clicked.\n\n            Returns:\n                None\n            \"\"\"\n            self.remove(control)\n\n        basemap_selector.observe(on_basemap_change, \"value\")\n        close_button.on_click(on_close_button_clicked)\n\n        widget_box = widgets.HBox([basemap_selector, close_button])\n        control = ipyleaflet.WidgetControl(widget=widget_box, position=position)\n        self.add(control)\n</code></pre>"},{"location":"arcgeo/#arcgeo.arcgeo.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, **kwargs)</code>  <code>special</code>","text":"<p>Initialize the map.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>Set the center of the map. Defaults to [20, 0].</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>Set the zoom level of the map. Defaults to 2.</p> <code>2</code> Source code in <code>arcgeo/arcgeo.py</code> <pre><code>def __init__(self, center=[20, 0], zoom=2, **kwargs):\n    \"\"\"Initialize the map.\n\n    Args:\n        center (list, optional): Set the center of the map. Defaults to [20, 0].\n        zoom (int, optional): Set the zoom level of the map. Defaults to 2.\n    \"\"\"        \n\n    if \"scroll_wheel_zoom\" not in kwargs:\n        kwargs[\"scroll_wheel_zoom\"] = True\n\n    if \"add_layer_control\" not in kwargs:\n        layer_control_flag = True\n\n    else:\n        layer_control_flag = kwargs[\"add_layer_control\"]\n    kwargs.pop(\"add_layer_control\", None)\n\n\n    super().__init__(center=center, zoom=zoom, **kwargs)\n    if layer_control_flag:\n        self.add_layers_control()\n</code></pre>"},{"location":"arcgeo/#arcgeo.arcgeo.Map.add_basemap","title":"<code>add_basemap(self, name)</code>","text":"<p>Adds a basemap to the current map.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str or object</code> <p>The name of the basemap as a string, or an object representing the basemap.</p> required <p>Exceptions:</p> Type Description <code>TypeError</code> <p>If the name is neither a string nor an object representing a basemap.</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>arcgeo/arcgeo.py</code> <pre><code>def add_basemap(self, name):\n    \"\"\"\n    Adds a basemap to the current map.\n\n    Args:\n        name (str or object): The name of the basemap as a string, or an object representing the basemap.\n\n    Raises:\n        TypeError: If the name is neither a string nor an object representing a basemap.\n\n    Returns:\n        None\n    \"\"\"       \n    if isinstance(name, str):\n        url = eval(f\"basemaps.{name}\").build_url()\n        self.add_tile_layer(url, name) \n    else:\n        self.add(name)\n</code></pre>"},{"location":"arcgeo/#arcgeo.arcgeo.Map.add_basemap_gui","title":"<code>add_basemap_gui(self, position='topright')</code>","text":"<p>Adds a basemap GUI to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the basemap GUI. Defaults to \"topright\".</p> <code>'topright'</code> <p>Returns:</p> Type Description <p>None</p> Source code in <code>arcgeo/arcgeo.py</code> <pre><code>def add_basemap_gui(self, position=\"topright\"):\n    \"\"\"Adds a basemap GUI to the map.\n\n    Args:\n        position (str, optional): The position of the basemap GUI. Defaults to \"topright\".\n\n    Returns:\n        None\n    \"\"\"\n    basemap_selector = widgets.Dropdown(\n        options=[\n            \"OpenStreetMap\",\n            \"OpenTopoMap\",\n            \"Esri.WorldImagery\",\n            \"CartoDB.DarkMatter\",\n            \"Esri.NatGeoWorldMap\",\n        ],\n        value=\"OpenStreetMap\",\n    )\n\n    close_button = widgets.Button(\n        icon='times', \n        layout={'width': '35px'}  \n    )\n\n    def on_basemap_change(change):\n        \"\"\"\n        Handles the event of changing the basemap on the map.\n\n        This function is designed to be used as a callback for an ipywidgets dropdown. \n        It takes a dictionary with a \"new\" key representing the new value of the dropdown, \n        and calls the add_basemap method with this new value.\n\n        Args:\n            change (dict): A dictionary with a \"new\" key representing the new value of the dropdown.\n\n        Returns:\n            None\n        \"\"\"\n\n        self.add_basemap(change['new'])\n\n\n    def on_close_button_clicked(button):\n        \"\"\"\n        Handles the event of clicking the close button on a control.\n\n        This function is designed to be used as a callback for a button click event. \n        It takes a button instance as an argument, and calls the remove method \n        to remove a global control variable from the map.\n\n        Args:\n            button (ipywidgets.Button): The button that was clicked.\n\n        Returns:\n            None\n        \"\"\"\n        self.remove(control)\n\n    basemap_selector.observe(on_basemap_change, \"value\")\n    close_button.on_click(on_close_button_clicked)\n\n    widget_box = widgets.HBox([basemap_selector, close_button])\n    control = ipyleaflet.WidgetControl(widget=widget_box, position=position)\n    self.add(control)\n</code></pre>"},{"location":"arcgeo/#arcgeo.arcgeo.Map.add_geojson","title":"<code>add_geojson(self, data, name='geojson', **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str | dict</code> <p>The GeoJSON data as a string, a dictionary, or a URL.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"geojson\".</p> <code>'geojson'</code> Source code in <code>arcgeo/arcgeo.py</code> <pre><code>def add_geojson(self, data, name=\"geojson\", **kwargs):\n    \"\"\"Adds a GeoJSON layer to the map.\n\n    Args:\n        data (str | dict): The GeoJSON data as a string, a dictionary, or a URL.\n        name (str, optional): The name of the layer. Defaults to \"geojson\".\n    \"\"\"\n    import json\n    import requests\n\n    # If the input is a string, check if it's a file path or URL\n\n    if isinstance(data, str):\n        if data.startswith('http://') or data.startswith('https://'):\n        # It's a URL, so we fetch the GeoJSON\n            response = requests.get(data)\n            response.raise_for_status()  # Raises an HTTPError if the HTTP request returned an unsuccessful status code\n            data = response.json()\n        else:\n            # It's a file path\n            with open(data, 'r') as f:\n                data = json.load(f)\n\n\n    if \"style\" not in kwargs:\n        kwargs[\"style\"] = {\"color\": \"black\", \"weight\": 1, \"fillOpacity\": 0}\n\n    if \"hover_style\" not in kwargs:\n        kwargs[\"hover_style\"] = {\"fillColor\": \"#542974\", \"fillOpacity\": 0.7}\n\n    layer = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"arcgeo/#arcgeo.arcgeo.Map.add_image","title":"<code>add_image(self, url, bounds, name='image', **kwargs)</code>","text":"<p>Adds an image overlay to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the image to add.</p> required <code>bounds</code> <code>list</code> <p>The bounds of the image as a list of tuples.</p> required <code>name</code> <code>str</code> <p>The name of the image overlay. Defaults to \"image\".</p> <code>'image'</code> Source code in <code>arcgeo/arcgeo.py</code> <pre><code>def add_image(self, url, bounds, name=\"image\", **kwargs):\n    \"\"\"\n    Adds an image overlay to the map.\n\n    Args:\n        url (str): The URL of the image to add.\n        bounds (list): The bounds of the image as a list of tuples.\n        name (str, optional): The name of the image overlay. Defaults to \"image\".\n    \"\"\"\n    layer = ipyleaflet.ImageOverlay(url=url, bounds=bounds, name=name, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"arcgeo/#arcgeo.arcgeo.Map.add_layers_control","title":"<code>add_layers_control(self, position='topright')</code>","text":"<p>Adds a layers control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the layers control. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>arcgeo/arcgeo.py</code> <pre><code>def add_layers_control(self, position=\"topright\"):\n    \"\"\"Adds a layers control to the map.\n\n    Args:\n        position (str, optional): The position of the layers control. Defaults to \"topright\".\n    \"\"\"\n    self.add_control(ipyleaflet.LayersControl(position=position))\n</code></pre>"},{"location":"arcgeo/#arcgeo.arcgeo.Map.add_opacity_slider","title":"<code>add_opacity_slider(self, layer_index=-1, description='Opacity:', position='topright')</code>","text":"<p>Adds an opacity slider for the specified layer.</p> <p>Parameters:</p> Name Type Description Default <code>layer</code> <code>object</code> <p>The layer for which to add the opacity slider.</p> required <code>description</code> <code>str</code> <p>The description of the opacity slider. Defaults to \"Opacity:\".</p> <code>'Opacity:'</code> <code>position</code> <code>str</code> <p>The position of the opacity slider. Defaults to \"topright\".</p> <code>'topright'</code> <p>Returns:</p> Type Description <p>None</p> Source code in <code>arcgeo/arcgeo.py</code> <pre><code>def add_opacity_slider(\n        self, layer_index=-1, description=\"Opacity:\", position=\"topright\"\n):\n    \"\"\"Adds an opacity slider for the specified layer.\n\n    Args:\n        layer (object): The layer for which to add the opacity slider.\n        description (str, optional): The description of the opacity slider. Defaults to \"Opacity:\".\n        position (str, optional): The position of the opacity slider. Defaults to \"topright\".\n\n    Returns:\n        None\n    \"\"\"\n    layer = self.layers[layer_index]\n    opacity_slider = widgets.FloatSlider(\n        description=description, min=0, max=1, value=layer.opacity, style={\"description_width\": \"initial\"}\n    )\n\n    def update_opacity(change):\n        \"\"\"\n        Updates the opacity of a layer based on the new value from a slider.\n\n        This function is designed to be used as a callback for an ipywidgets slider. \n        It takes a dictionary with a \"new\" key representing the new value of the slider, \n        and sets the opacity of a global layer variable to this new value.\n\n        Args:\n        change (dict): A dictionary with a \"new\" key representing the new value of the slider.\n\n        Returns:\n            None\n        \"\"\"\n        layer.opacity = change[\"new\"]\n\n    opacity_slider.observe(update_opacity, \"value\")\n\n    control = ipyleaflet.WidgetControl(widget=opacity_slider, position=position)\n    self.add(control)\n\n    from ipywidgets import Dropdown, Button, HBox\n</code></pre>"},{"location":"arcgeo/#arcgeo.arcgeo.Map.add_raster","title":"<code>add_raster(self, data, name='raster', zoom_to_layer=True, **kwargs)</code>","text":"<p>Adds a raster layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or rasterio.DatasetReader</code> <p>The raster data to add. This can be a file path or a rasterio dataset.</p> required <code>colormap</code> <code>str</code> <p>The name of the colormap to use. Defaults to \"inferno\".</p> required <code>name</code> <code>str</code> <p>The name of the raster layer. Defaults to \"raster\".</p> <code>'raster'</code> <code>**kwargs</code> <p>Arbitrary keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <p>None</p> Source code in <code>arcgeo/arcgeo.py</code> <pre><code>def add_raster(self, data, name=\"raster\", zoom_to_layer=True, **kwargs):\n    \"\"\"Adds a raster layer to the map.\n\n    Args:\n        data (str or rasterio.DatasetReader): The raster data to add. This can be a file path or a rasterio dataset.\n        colormap (str, optional): The name of the colormap to use. Defaults to \"inferno\".\n        name (str, optional): The name of the raster layer. Defaults to \"raster\".\n        **kwargs: Arbitrary keyword arguments.\n\n    Returns:\n        None\n    \"\"\"\n\n    try:\n        from localtileserver import TileClient, get_leaflet_tile_layer\n    except ImportError:\n        raise ImportError(\"Please install the localtileserver package.\")\n\n\n    client = TileClient(data)\n    layer = get_leaflet_tile_layer(client, name=name, **kwargs)\n    self.add(layer)\n\n    if zoom_to_layer:\n        self.center = client.center()\n        self.zoom = client.default_zoom\n</code></pre>"},{"location":"arcgeo/#arcgeo.arcgeo.Map.add_shp","title":"<code>add_shp(self, data, name='shp', **kwargs)</code>","text":"<p>Adds a shapefile to the current map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>The path to the shapefile as a string, or a dictionary representing the shapefile.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"shp\".</p> <code>'shp'</code> <code>**kwargs</code> <p>Arbitrary keyword arguments.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>TypeError</code> <p>If the data is neither a string nor a dictionary representing a shapefile.</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>arcgeo/arcgeo.py</code> <pre><code>def add_shp(self, data, name=\"shp\", **kwargs):\n    \"\"\"\n    Adds a shapefile to the current map.\n\n    Args:\n        data (str or dict): The path to the shapefile as a string, or a dictionary representing the shapefile.\n        name (str, optional): The name of the layer. Defaults to \"shp\".\n        **kwargs: Arbitrary keyword arguments.\n\n    Raises:\n        TypeError: If the data is neither a string nor a dictionary representing a shapefile.\n\n    Returns:\n        None\n    \"\"\"\n    import shapefile\n    import json\n\n    if isinstance(data, str):\n        with shapefile.Reader(data) as shp:\n            data = shp.__geo_interface__\n\n    self.add_geojson(data, name, **kwargs)\n\n\n\n    import geopandas as gpd\n    from ipyleaflet import GeoData\n    from shapely.geometry import Point, LineString\n</code></pre>"},{"location":"arcgeo/#arcgeo.arcgeo.Map.add_vector","title":"<code>add_vector(self, data)</code>","text":"<p>Add vector data to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or geopandas.GeoDataFrame</code> <p>The vector data to add. This can be a file path or a GeoDataFrame.</p> required Source code in <code>arcgeo/arcgeo.py</code> <pre><code>def add_vector(self, data):\n    \"\"\"\n    Add vector data to the map.\n\n    Args:\n        data (str or geopandas.GeoDataFrame): The vector data to add. This can be a file path or a GeoDataFrame.\n    \"\"\"\n    import geopandas as gpd\n    from ipyleaflet import GeoData\n\n    if isinstance(data, gpd.GeoDataFrame):\n        vector_layer = GeoData(geo_dataframe=data)\n\n    elif isinstance(data, str):\n        vector_layer = GeoData(geo_dataframe=gpd.read_file(data))\n\n    else:\n        raise ValueError(\"Unsupported data format. Please provide a GeoDataFrame or a file path.\")\n\n    self.add_layer(vector_layer)\n</code></pre>"},{"location":"arcgeo/#arcgeo.arcgeo.Map.add_widget","title":"<code>add_widget(self, widget, position='topright')</code>","text":"<p>Adds a widget to the map.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>object</code> <p>The widget to add.</p> required <code>position</code> <code>str</code> <p>The position of the widget. Defaults to \"topright\".</p> <code>'topright'</code> <p>Returns:</p> Type Description <p>None</p> Source code in <code>arcgeo/arcgeo.py</code> <pre><code>def add_widget(self, widget, position=\"topright\"):\n    \"\"\"Adds a widget to the map.\n\n    Args:\n        widget (object): The widget to add.\n        position (str, optional): The position of the widget. Defaults to \"topright\".\n\n    Returns:\n        None\n    \"\"\"\n    control = ipyleaflet.WidgetControl(widget=widget, position=position)\n    self.add(control)\n</code></pre>"},{"location":"arcgeo/#arcgeo.arcgeo.Map.add_zoom_slider","title":"<code>add_zoom_slider(self, description='Zoom level:', min=0, max=24, value=10, position='topright')</code>","text":"<p>Adds a zoom slider to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the zoom slider. Defaults to \"topright\".</p> <code>'topright'</code> <p>Returns:</p> Type Description <p>None</p> Source code in <code>arcgeo/arcgeo.py</code> <pre><code>def add_zoom_slider(\n        self, description=\"Zoom level:\", min=0, max=24, value=10, position=\"topright\"\n):\n    \"\"\"Adds a zoom slider to the map.\n\n    Args:\n        position (str, optional): The position of the zoom slider. Defaults to \"topright\".\n\n    Returns:\n        None\n    \"\"\"\n    zoom_slider = widgets.IntSlider(\n        description=description, min=min, max=max, value=value\n    )\n\n    control = ipyleaflet.WidgetControl(widget=zoom_slider, position=position)\n    self.add(control)\n    widgets.jslink((zoom_slider, \"value\"), (self, \"zoom\"))\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#arcgeo.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>arcgeo/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/Omiimo05/arcgeo/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>ArcGeo could always use more documentation, whether as part of the official ArcGeo docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/Omiimo05/arcgeo/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up arcgeo for local development.</p> <ol> <li> <p>Fork the arcgeo repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/arcgeo.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv arcgeo\n$ cd arcgeo/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 arcgeo tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/Omiimo05/arcgeo/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install ArcGeo, run this command in your terminal:</p> <pre><code>pip install arcgeo\n</code></pre> <p>This is the preferred method to install ArcGeo, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install ArcGeo from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/Omiimo05/arcgeo\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use ArcGeo in a project:</p> <pre><code>import arcgeo\n</code></pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[\u00a0]: Copied! <pre>print('Hello World!')\n</pre> print('Hello World!')"},{"location":"examples/lab9/","title":"Lab9","text":"In\u00a0[1]: Copied! <pre>import arcgeo\n</pre> import arcgeo In\u00a0[2]: Copied! <pre>import ipywidgets as widgets\nfrom ipyleaflet import WidgetControl\n</pre> import ipywidgets as widgets from ipyleaflet import WidgetControl In\u00a0[3]: Copied! <pre>m = arcgeo.Map()\nm\n</pre> m = arcgeo.Map() m <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[4]: Copied! <pre>m.add_basemap_gui()\nm\n</pre> m.add_basemap_gui() m <pre>Map(bottom=654.0, center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', \u2026</pre> In\u00a0[5]: Copied! <pre>m.add_zoom_slider()\n</pre> m.add_zoom_slider() In\u00a0[6]: Copied! <pre>output_widget = widgets.Output(layout={\"border\": \"1px solid black\"})\noutput_control = WidgetControl(widget=output_widget, position=\"bottomleft\")\nm.add_control(output_control)\nwith output_widget:\n    print(\"netpanda dead, arcgeo on again!\")\n</pre> output_widget = widgets.Output(layout={\"border\": \"1px solid black\"}) output_control = WidgetControl(widget=output_widget, position=\"bottomleft\") m.add_control(output_control) with output_widget:     print(\"netpanda dead, arcgeo on again!\")"},{"location":"examples/practice/","title":"Practice","text":"In\u00a0[3]: Copied! <pre>pip install arcgeo\n</pre> pip install arcgeo <pre>Requirement already satisfied: arcgeo in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (0.0.3)\nRequirement already satisfied: numpy in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from arcgeo) (1.23.4)\nRequirement already satisfied: ipyleaflet in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from arcgeo) (0.18.2)\nRequirement already satisfied: ipywidgets&lt;9,&gt;=7.6.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipyleaflet-&gt;arcgeo) (7.8.1)\nRequirement already satisfied: traittypes&lt;3,&gt;=0.2.1 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipyleaflet-&gt;arcgeo) (0.2.1)\nRequirement already satisfied: xyzservices&gt;=2021.8.1 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipyleaflet-&gt;arcgeo) (2023.10.1)\nRequirement already satisfied: branca&gt;=0.5.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipyleaflet-&gt;arcgeo) (0.7.0)\nRequirement already satisfied: jinja2 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from branca&gt;=0.5.0-&gt;ipyleaflet-&gt;arcgeo) (3.1.3)\nRequirement already satisfied: comm&gt;=0.1.3 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (0.2.1)\nRequirement already satisfied: ipython-genutils~=0.2.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (0.2.0)\nRequirement already satisfied: traitlets&gt;=4.3.1 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (5.14.1)\nRequirement already satisfied: widgetsnbextension~=3.6.6 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (3.6.6)\nRequirement already satisfied: ipython&gt;=4.0.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (8.20.0)\nRequirement already satisfied: jupyterlab-widgets&lt;3,&gt;=1.0.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (1.1.7)\nRequirement already satisfied: decorator in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=4.0.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (5.1.1)\nRequirement already satisfied: jedi&gt;=0.16 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=4.0.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (0.19.1)\nRequirement already satisfied: matplotlib-inline in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=4.0.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (0.1.6)\nRequirement already satisfied: prompt-toolkit&lt;3.1.0,&gt;=3.0.41 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=4.0.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (3.0.43)\nRequirement already satisfied: pygments&gt;=2.4.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=4.0.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (2.17.2)\nRequirement already satisfied: stack-data in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=4.0.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (0.6.3)\nRequirement already satisfied: colorama in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=4.0.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (0.4.6)\nRequirement already satisfied: notebook&gt;=4.4.1 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (7.0.7)\nRequirement already satisfied: MarkupSafe&gt;=2.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jinja2-&gt;branca&gt;=0.5.0-&gt;ipyleaflet-&gt;arcgeo) (2.1.4)\nRequirement already satisfied: parso&lt;0.9.0,&gt;=0.8.3 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jedi&gt;=0.16-&gt;ipython&gt;=4.0.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (0.8.3)\nRequirement already satisfied: jupyter-server&lt;3,&gt;=2.4.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (2.12.5)\nRequirement already satisfied: jupyterlab-server&lt;3,&gt;=2.22.1 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (2.25.2)\nRequirement already satisfied: jupyterlab&lt;5,&gt;=4.0.2 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (4.0.11)\nRequirement already satisfied: notebook-shim&lt;0.3,&gt;=0.2 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (0.2.3)\nRequirement already satisfied: tornado&gt;=6.2.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (6.4)\nRequirement already satisfied: wcwidth in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from prompt-toolkit&lt;3.1.0,&gt;=3.0.41-&gt;ipython&gt;=4.0.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (0.2.13)\nRequirement already satisfied: executing&gt;=1.2.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from stack-data-&gt;ipython&gt;=4.0.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (2.0.1)\nRequirement already satisfied: asttokens&gt;=2.1.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from stack-data-&gt;ipython&gt;=4.0.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (2.4.1)\nRequirement already satisfied: pure-eval in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from stack-data-&gt;ipython&gt;=4.0.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (0.2.2)\nRequirement already satisfied: six&gt;=1.12.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from asttokens&gt;=2.1.0-&gt;stack-data-&gt;ipython&gt;=4.0.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (1.16.0)\nRequirement already satisfied: anyio&gt;=3.1.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (4.2.0)\nRequirement already satisfied: argon2-cffi in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (23.1.0)\nRequirement already satisfied: jupyter-client&gt;=7.4.4 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (8.6.0)\nRequirement already satisfied: jupyter-core!=5.0.*,&gt;=4.12 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (5.7.1)\nRequirement already satisfied: jupyter-events&gt;=0.9.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (0.9.0)\nRequirement already satisfied: jupyter-server-terminals in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (0.5.2)\nRequirement already satisfied: nbconvert&gt;=6.4.4 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (7.14.2)\nRequirement already satisfied: nbformat&gt;=5.3.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (5.9.2)\nRequirement already satisfied: overrides in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (7.6.0)\nRequirement already satisfied: packaging in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (23.2)\nRequirement already satisfied: prometheus-client in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (0.19.0)\nRequirement already satisfied: pywinpty in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (2.0.12)\nRequirement already satisfied: pyzmq&gt;=24 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (25.1.2)\nRequirement already satisfied: send2trash&gt;=1.8.2 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (1.8.2)\nRequirement already satisfied: terminado&gt;=0.8.3 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (0.18.0)\nRequirement already satisfied: websocket-client in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (1.7.0)\nRequirement already satisfied: async-lru&gt;=1.0.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyterlab&lt;5,&gt;=4.0.2-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (2.0.4)\nRequirement already satisfied: ipykernel in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyterlab&lt;5,&gt;=4.0.2-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (6.29.0)\nRequirement already satisfied: jupyter-lsp&gt;=2.0.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyterlab&lt;5,&gt;=4.0.2-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (2.2.2)\nRequirement already satisfied: babel&gt;=2.10 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyterlab-server&lt;3,&gt;=2.22.1-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (2.14.0)\nRequirement already satisfied: json5&gt;=0.9.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyterlab-server&lt;3,&gt;=2.22.1-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (0.9.14)\nRequirement already satisfied: jsonschema&gt;=4.18.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyterlab-server&lt;3,&gt;=2.22.1-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (4.21.1)\nRequirement already satisfied: requests&gt;=2.31 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyterlab-server&lt;3,&gt;=2.22.1-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (2.31.0)\nRequirement already satisfied: idna&gt;=2.8 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from anyio&gt;=3.1.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (3.6)\nRequirement already satisfied: sniffio&gt;=1.1 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from anyio&gt;=3.1.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (1.3.0)\nRequirement already satisfied: attrs&gt;=22.2.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jsonschema&gt;=4.18.0-&gt;jupyterlab-server&lt;3,&gt;=2.22.1-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (23.2.0)\nRequirement already satisfied: jsonschema-specifications&gt;=2023.03.6 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jsonschema&gt;=4.18.0-&gt;jupyterlab-server&lt;3,&gt;=2.22.1-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (2023.12.1)\nRequirement already satisfied: referencing&gt;=0.28.4 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jsonschema&gt;=4.18.0-&gt;jupyterlab-server&lt;3,&gt;=2.22.1-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (0.32.1)\nRequirement already satisfied: rpds-py&gt;=0.7.1 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jsonschema&gt;=4.18.0-&gt;jupyterlab-server&lt;3,&gt;=2.22.1-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (0.17.1)\nRequirement already satisfied: python-dateutil&gt;=2.8.2 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-client&gt;=7.4.4-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (2.8.2)\nRequirement already satisfied: platformdirs&gt;=2.5 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-core!=5.0.*,&gt;=4.12-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (4.1.0)\nRequirement already satisfied: pywin32&gt;=300 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-core!=5.0.*,&gt;=4.12-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (306)\nRequirement already satisfied: python-json-logger&gt;=2.0.4 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-events&gt;=0.9.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (2.0.7)\nRequirement already satisfied: pyyaml&gt;=5.3 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-events&gt;=0.9.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (6.0.1)\nRequirement already satisfied: rfc3339-validator in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-events&gt;=0.9.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (0.1.4)\nRequirement already satisfied: rfc3986-validator&gt;=0.1.1 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-events&gt;=0.9.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (0.1.1)\nRequirement already satisfied: beautifulsoup4 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from nbconvert&gt;=6.4.4-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (4.12.3)\nRequirement already satisfied: bleach!=5.0.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from nbconvert&gt;=6.4.4-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (6.1.0)\nRequirement already satisfied: defusedxml in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from nbconvert&gt;=6.4.4-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (0.7.1)\nRequirement already satisfied: jupyterlab-pygments in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from nbconvert&gt;=6.4.4-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (0.3.0)\nRequirement already satisfied: mistune&lt;4,&gt;=2.0.3 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from nbconvert&gt;=6.4.4-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (3.0.2)\nRequirement already satisfied: nbclient&gt;=0.5.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from nbconvert&gt;=6.4.4-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (0.9.0)\nRequirement already satisfied: pandocfilters&gt;=1.4.1 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from nbconvert&gt;=6.4.4-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (1.5.1)\nRequirement already satisfied: tinycss2 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from nbconvert&gt;=6.4.4-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (1.2.1)\nRequirement already satisfied: fastjsonschema in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from nbformat&gt;=5.3.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (2.19.1)\nRequirement already satisfied: charset-normalizer&lt;4,&gt;=2 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from requests&gt;=2.31-&gt;jupyterlab-server&lt;3,&gt;=2.22.1-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (3.3.2)\nRequirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from requests&gt;=2.31-&gt;jupyterlab-server&lt;3,&gt;=2.22.1-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (2.0.7)\nRequirement already satisfied: certifi&gt;=2017.4.17 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from requests&gt;=2.31-&gt;jupyterlab-server&lt;3,&gt;=2.22.1-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (2024.2.2)\nRequirement already satisfied: argon2-cffi-bindings in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from argon2-cffi-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (21.2.0)\nRequirement already satisfied: debugpy&gt;=1.6.5 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipykernel-&gt;jupyterlab&lt;5,&gt;=4.0.2-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (1.8.0)\nRequirement already satisfied: nest-asyncio in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipykernel-&gt;jupyterlab&lt;5,&gt;=4.0.2-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (1.6.0)\nRequirement already satisfied: psutil in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipykernel-&gt;jupyterlab&lt;5,&gt;=4.0.2-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (5.9.8)\nRequirement already satisfied: webencodings in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from bleach!=5.0.0-&gt;nbconvert&gt;=6.4.4-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (0.5.1)\nRequirement already satisfied: fqdn in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jsonschema[format-nongpl]&gt;=4.18.0-&gt;jupyter-events&gt;=0.9.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (1.5.1)\nRequirement already satisfied: isoduration in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jsonschema[format-nongpl]&gt;=4.18.0-&gt;jupyter-events&gt;=0.9.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (20.11.0)\nRequirement already satisfied: jsonpointer&gt;1.13 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jsonschema[format-nongpl]&gt;=4.18.0-&gt;jupyter-events&gt;=0.9.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (2.4)\nRequirement already satisfied: uri-template in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jsonschema[format-nongpl]&gt;=4.18.0-&gt;jupyter-events&gt;=0.9.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (1.3.0)\nRequirement already satisfied: webcolors&gt;=1.11 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jsonschema[format-nongpl]&gt;=4.18.0-&gt;jupyter-events&gt;=0.9.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (1.13)\nRequirement already satisfied: cffi&gt;=1.0.1 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from argon2-cffi-bindings-&gt;argon2-cffi-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (1.16.0)\nRequirement already satisfied: soupsieve&gt;1.2 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from beautifulsoup4-&gt;nbconvert&gt;=6.4.4-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (2.5)\nRequirement already satisfied: pycparser in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from cffi&gt;=1.0.1-&gt;argon2-cffi-bindings-&gt;argon2-cffi-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (2.21)\nRequirement already satisfied: arrow&gt;=0.15.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from isoduration-&gt;jsonschema[format-nongpl]&gt;=4.18.0-&gt;jupyter-events&gt;=0.9.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (1.3.0)\nRequirement already satisfied: types-python-dateutil&gt;=2.8.10 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from arrow&gt;=0.15.0-&gt;isoduration-&gt;jsonschema[format-nongpl]&gt;=4.18.0-&gt;jupyter-events&gt;=0.9.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;arcgeo) (2.8.19.20240106)\nNote: you may need to restart the kernel to use updated packages.\n</pre> In\u00a0[4]: Copied! <pre>import arcgeo\n</pre> import arcgeo In\u00a0[7]: Copied! <pre>from arcgeo import Maps\n</pre> from arcgeo import Maps <pre>\n---------------------------------------------------------------------------\nImportError                               Traceback (most recent call last)\nCell In[7], line 1\n----&gt; 1 from arcgeo import Maps\n\nImportError: cannot import name 'Maps' from 'arcgeo' (c:\\Users\\Shabiha\\anaconda3\\envs\\geo\\Lib\\site-packages\\arcgeo\\__init__.py)</pre> In\u00a0[6]: Copied! <pre>m = geohey.Map()\nm\n</pre> m = geohey.Map() m <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre>"}]}